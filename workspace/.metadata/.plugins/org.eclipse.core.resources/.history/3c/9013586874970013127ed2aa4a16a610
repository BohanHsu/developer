package maxPointsonaLine;

// * Definition for a point.
class Point {
	int x;
	int y;

	Point() {
		x = 0;
		y = 0;
	}

	Point(int a, int b) {
		x = a;
		y = b;
	}
}

public class Solution {
	public int maxPoints(Point[] points) {
		int max = 0;
		int len = points.length;
		for (int i = 0; i < len; i++) {
			for (int j = i + 1; j < len; j++) {
				int count = 2;
				for (int k = j + 1; k < len; k++) {
					if (inSameLine(points[i], points[j], points[k])) {
						count++;
						System.out.println(""+i+" "+j+" "+k);
						System.out.println(count);
					}
				}
				if (count > max) {
					max = count;
				}
			}
		}
		return max;
	}

	/**
	 * Point * 3 -> boolean return true iff the third point is in the same line
	 * with the first two points, otherwise return false.
	 */
	private boolean inSameLine(Point a, Point b, Point c) {
		int xa = a.x;
		int xb = b.x;
		int xc = c.x;
		int ya = a.y;
		int yb = b.y;
		int yc = c.y;


		if (xa == xb && xb == xc) {
			return true;
		} else if (xa == xb && xb != xc) {
			return false;
		}

		double k = (double) (yb - ya) / (double) (xb - xa);
		double bb = (double) ya - k * (double) xa;

		return yc == k * xc + bb;
	}

	public static void main(String[] args) {
		Point p1 = new Point(1, 1);
		Point p2 = new Point(1, 1);
		Point p3 = new Point(2, 2);
		Point p4 = new Point(7, 13);

		Point[] points = new Point[] { p1, p2, p3, p4 };

		Solution s = new Solution();
		int max = s.maxPoints(points);

		System.out.println(max);
	}
}
