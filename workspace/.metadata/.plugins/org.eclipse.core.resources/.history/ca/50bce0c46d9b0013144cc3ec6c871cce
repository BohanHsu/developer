package copyListwithRandomPointer;

import java.util.HashMap;

//  Definition for singly-linked list with a random pointer.
class RandomListNode {
	int label;
	RandomListNode next, random;

	RandomListNode(int x) {
		this.label = x;
	}
}

public class Solution {
	public RandomListNode copyRandomList(RandomListNode head) {
		if (head == null) {
			return null;
		}

		HashMap<RandomListNode, RandomListNode> mapf = new HashMap<RandomListNode, RandomListNode>();
		RandomListNode copy = null;
		RandomListNode oldrln = head;
		RandomListNode newrln = null;
		RandomListNode copyTail = null;
		while (oldrln != null) {
			newrln = new RandomListNode(oldrln.label);
			if (copy == null) {
				copy = newrln;
				copyTail = newrln;
			} else {
				copyTail.next = newrln;
				copyTail = newrln;
			}
			mapf.put(oldrln, newrln);
		}

		oldrln = head;
		while (oldrln != null) {
			newrln = mapf.get(oldrln);
			newrln.random = mapf.get(oldrln.random);
		}

		return copy;
	}
	
	
	public static void main(String[] args) {
		RandomListNode rln0 = new RandomListNode(0);
		RandomListNode rln1 = new RandomListNode(1);
		RandomListNode rln2 = new RandomListNode(2);
		RandomListNode rln3 = new RandomListNode(3);
		RandomListNode rln4 = new RandomListNode(4);
		RandomListNode rln5 = new RandomListNode(5);
		RandomListNode rln6 = new RandomListNode(6);
		RandomListNode rln7 = new RandomListNode(7);
		RandomListNode rln8 = new RandomListNode(8);
		RandomListNode rln9 = new RandomListNode(9);
		
	}
}