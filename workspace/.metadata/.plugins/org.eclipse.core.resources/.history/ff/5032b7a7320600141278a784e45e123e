package populatingNextRightPointersinEachNode;

//* Definition for binary tree with next pointer.
class TreeLinkNode {
	int val;
	TreeLinkNode left, right, next;

	TreeLinkNode(int x) {
		val = x;
	}
}

public class Solution {
	public void connect(TreeLinkNode root) {
		int last = 2;
		int cnt = 1;
		TreeLinkNode n = root;
		TreeLinkNode fa = null;
		TreeLinkNode first = root;
		while (n != null) {
			if (n == root) {
				n.next = null;
				fa = n;
				n = n.left;
				first = n;
			} else if (n == fa.left) {
				n.next = fa.right;
			} else {
				// right child
				if (fa.next != null) {
					n.next = fa.next.left;
				} else {
					// this is the last
					n.next = null;
					n = first;
					first = n.left;
				}
			}

		}
	}

	public static void main(String[] args) {
		Solution s = new Solution();
		TreeLinkNode t1 = new TreeLinkNode(1);
		TreeLinkNode t2 = new TreeLinkNode(2);
		TreeLinkNode t3 = new TreeLinkNode(1);
		TreeLinkNode t4 = new TreeLinkNode(1);
		TreeLinkNode t5 = new TreeLinkNode(1);
		TreeLinkNode t6 = new TreeLinkNode(1);
		TreeLinkNode t7 = new TreeLinkNode(7);
		t1.left = t2;
		t1.right = t3;
		t2.left = t4;
		t2.right = t5;
		t3.left = t6;
		t3.right = t7;
		s.connect(t1);
		System.out.println(t1.next);
		System.out.println(t2.next);
		System.out.println(t3.next);
		System.out.println(t4.next);
		System.out.println(t5.next);
		System.out.println(t6.next);
		System.out.println(t7.next);
	}
}
