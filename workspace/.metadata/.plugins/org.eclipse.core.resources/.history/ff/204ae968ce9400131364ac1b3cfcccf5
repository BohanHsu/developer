package graph;

import heap.Entry;
import heap.NaryTree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

public class Dijkstra {
	private Graph g = null;
	HashMap<Integer, Node> v = null;
	ArrayList<Edge> e = null;
	NaryTree nt = null;

	public Dijkstra(Graph g, NaryTree nt) {
		super();
		this.g = g;
		this.e = g.getE();
		this.v = g.getV();
		this.nt = nt;
	}

	private int cmp(Double d1, Double d2) {
		boolean e1Inf = d1 == null;
		boolean e2Inf = d2 == null;

		if (e1Inf && !e2Inf) {
			return 1;
		}
		if (!e1Inf && e2Inf) {
			return -1;
		}
		if (e1Inf && e2Inf) {
			return 0;
		}
		double e1Val = e1.getValue();
		double e2Val = e2.getValue();
		if (e1Val > e2Val) {
			return 1;
		}
		if (e1Val < e2Val) {
			return -1;
		}
		if (e1Val == e2Val) {
			return 0;
		}
		return 0;
	}
	
	public void dijkstra(int source) {
		HashMap<Integer, Double> dist = new HashMap<Integer, Double>();
		HashMap<Integer, Integer> prev = new HashMap<Integer, Integer>();
		ArrayList<Integer> vs = new ArrayList<Integer>();
		for (Integer i : v.keySet()) {
			vs.add(i);
		}
		Collections.sort(vs);
		ArrayList<Entry> eArray = new ArrayList<Entry>();
		for (Integer i : vs) {
			Entry e = null;
			Node n = null;
			n = new Node(i);
			if (i == source) {
				e = new Entry(n, (double)0);
				dist.put(i, (double) 0);
			} else {
				e = new Entry(n, null);
				dist.put(i, null);
			}
			eArray.add(e);
			prev.put(i, null);
		}
		this.nt.makeQueue(eArray);

		while (!nt.isEmpty()) {
			int id = nt.deleteMostPriority().getKey().getId();
			ArrayList<Edge> edges = g.edgeFromVertex(id);
			
			for (Edge edge : edges) {
				int u = edge.getTgt();
				Double uDist = dist.get(u);
				
			}
		}
	}

}
