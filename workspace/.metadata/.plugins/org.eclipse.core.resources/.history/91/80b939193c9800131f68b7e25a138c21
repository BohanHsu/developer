package binaryTreePostorderTraversal;

import java.util.ArrayList;

// to copy
import java.util.Stack;

// Definition for binary tree
class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;

	TreeNode(int x) {
		val = x;
	}
}

public class Solution {
	private ArrayList<Integer> postOrder = new ArrayList<Integer>();
	private Stack<TreeNode> nodes = new Stack<TreeNode>();
	private Stack<Integer> status = new Stack<Integer>();

	// 0 in status means no child has been visited
	// 1 means left child has been visited
	// 2 means right child has been visited

	public ArrayList<Integer> postorderTraversal(TreeNode root) {
		if (root == null) {
			return postOrder;
		}

		TreeNode tn = null;

		nodes.push(root);
		status.push(0);

		while (!nodes.empty()) {
			int sta = this.status.peek();
			tn = this.nodes.peek();
			switch (sta) {
			case 0:
				// no child has been visited
				if (tn.left != null) {
					nodes.push(tn.left);
				}
				break;
			case 1:
				// left child has been visited
				if (tn.right != null) {
					nodes.push(tn.right);
				}
				break;
			case 2:
				// right child has been visited
				tn = nodes.pop();
				visitNode(tn);
				break;
			default:

			}
		}
		return this.postOrder;
	}

	/**
	 * TreeNode -> Void
	 * 
	 * @param tn
	 *            : a tree node effect : add the value in this node to the tail
	 *            of postOrder array list
	 */
	private void visitNode(TreeNode tn) {
		this.postOrder.add(tn.val);
	}

	/**
	 * Void -> Void effect : modified the status stack, add 1 to the head
	 * element iff valided.
	 */
	private void changeStatue() {
		if (this.status.empty()) {
			return;
		}
		int s = this.status.peek();
		if (s == 0 || s == 1) {
			this.status.pop();
			this.status.push(s + 1);
		}
	}
	
	/**
	 * test
	 * @param args
	 */
	public static void main(String[] args) {
		
	}
}