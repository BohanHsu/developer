package graph;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;

import comparator.IdCom;
import comparator.NodeIdComp;
import comparator.PostTimeCom;

public class Graph {
	private HashMap<Integer, Node> v = null;
	private ArrayList<Edge> e = null;
	private int clock = 0;
	
	public Graph(String[] edge) {
		HashSet<Integer> ver = new HashSet<Integer>();
		this.v = new HashMap<Integer,Node>();
		this.e = new ArrayList<Edge>();
		
		for (String string : edge) {
			String[] a = string.split(",");
			int src = Integer.parseInt(a[0]);
			int tgt = Integer.parseInt(a[1]);
			double weight = Double.parseDouble(a[2]);
			ver.add(src);
			ver.add(tgt);
			e.add(new Edge(src, tgt, weight));
		}
		
		for (Integer integer : ver) {
			v.put(integer, new Node(integer));
		}
	}
	
	
	
	public HashMap<Integer, Node> getV() {
		return v;
	}



	public ArrayList<Edge> getE() {
		return e;
	}



	private ArrayList<Edge> edgeFromVertex(int id){
		ArrayList<Edge> res = new ArrayList<Edge>();
		for (Edge edge : this.e) {
			if(edge.getSrc() == id){
				res.add(edge);
			}
		}
		Collections.sort(res, new IdCom());
//		System.out.println(res);
		return res;
	} 
	
	
	public void dfs(int source){
		this.clock = 1;
		explore(source);
	}
	
	private void explore(int vertex){
		Node n = v.get(vertex);
//		System.out.println(this.clock);
		n.setPreVisit(this.clock);
		this.clock++;
		for (Edge e: edgeFromVertex(vertex)){
			Node ver = v.get(e.getTgt());
			if (ver.getPreVisit() == 0){
			explore(e.getTgt());
			}
		}
		
//		System.out.println(this.clock);
		n.setPostVisit(this.clock);
		this.clock++;

	}
	
	public ArrayList<Node> topologicalSort(){
		ArrayList<Node> res = new ArrayList<Node>();
		for (Entry<Integer, Node> en : v.entrySet()) {
			res.add(en.getValue());
		}
		Collections.sort(res, new PostTimeCom());
		return res;
	}
	
	public void singleSourceShortestPath(){
		ArrayList<Node> topoList = topologicalSort();
		HashMap<Integer, Double> dist = new HashMap<Integer, Double>();
		HashMap<Integer, Integer> prev = new HashMap<Integer,Integer>();
		for (Node node : topoList) {
			dist.put(node.getId(), Double.MAX_VALUE);
			prev.put(node.getId(), null);
		}		
		dist.put(topoList.get(0).getId(), 0.0);	
		for (Node node : topoList) {
			ArrayList<Edge> edges = edgeFromVertex(node.getId());
			for (Edge edge : edges) {
				System.out.println("("+edge.getSrc()+","+edge.getTgt()+") in E");
				int src = edge.getSrc();
				int tgt = edge.getTgt();
				double wei = edge.getWeight();
				double srcwei = dist.get(src);
				double tgtwei = dist.get(tgt);
				if (srcwei + wei < tgtwei){
					System.out.println("\t" + srcwei + "+" + wei + " < " + tgtwei);
					System.out.println("\t\t" + tgt + ".dist <- " + (srcwei + wei));
					System.out.println("\t\t" + tgt + ".prev <- " + src);
					dist.put(tgt, srcwei + wei);
					prev.put(tgt, src);
				}else{
					System.out.println("\t" + srcwei + "+" + wei + " >= " + tgtwei);
				}
			}
		}	
	}
	
	public void moore(int vertex){
		ArrayList<Node> list = new ArrayList<Node>();
		for (Integer id : v.keySet()) {
			list.add(new Node(id));
		}
		Collections.sort(list, new NodeIdComp());
		HashMap<Integer, Double> dist = new HashMap<Integer, Double>();
		HashMap<Integer, Integer> prev = new HashMap<Integer,Integer>();
		for (Node node : list) {
			dist.put(node.getId(), Double.MAX_VALUE);
			prev.put(node.getId(), null);
		}		
		dist.put(vertex, 0.0);
		ArrayList<Edge> edges = this.e;
		
		System.out.print("at iteration: " + 0);
		for (Node node : list) {
			System.out.print("\t Node:" + node.getId() + "\t dist:" + dist.get(node.getId()));
		}
		System.out.println("\n");
		
		for (int i = 1; i < list.size() ; i++) {
			for (Edge edge : edges) {
//				System.out.println("("+edge.getSrc()+","+edge.getTgt()+") in E");
				int src = edge.getSrc();
				int tgt = edge.getTgt();
				double wei = edge.getWeight();
				double srcwei = dist.get(src);
				double tgtwei = dist.get(tgt);
				if (srcwei + wei < tgtwei){
					System.out.println("\t" + srcwei + "+" + wei + " < " + tgtwei);
					System.out.println("\t\t" + tgt + ".dist <- " + (srcwei + wei));
					System.out.println("\t\t" + tgt + ".prev <- " + src);
					dist.put(tgt, srcwei + wei);
					prev.put(tgt, src);
				}else{
//					System.out.println("\t" + srcwei + "+" + wei + " >= " + tgtwei);
				}
			}
			System.out.print("at iteration: " + i);
			for (Node node : list) {
				System.out.print("\t N:" + node.getId() + "\t d:" + dist.get(node.getId()));
			}
			System.out.println("\n");
		}
	}
}
