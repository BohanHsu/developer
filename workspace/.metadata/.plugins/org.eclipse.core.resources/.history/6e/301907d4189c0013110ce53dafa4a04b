package candy;

public class Solution {
	int[] c = null;
	int[] ratings = null;
	int index = 0;

	public int candy(int[] ratings) {
		int len = ratings.length;
		c = new int[len];
		this.ratings = ratings;

		for (int i = 0; i < len; i++) {
			c[i] = 0;
		}
		compare(0);

		int mc = 0;
		for (int i = 0; i < len; i++) {
			// mc = mc + c[i];
			System.out.println(c[i]);
		}

		return mc;
	}

	/**
	 * int * 3 -> void
	 */
	private void compare(int i) {
		int l = getR(i - 1);
		int r = getR(i);
		int m = getR(i + 1);

		int min = Math.min(l, r);
		int max = Math.max(l, r);

		if (m < min) {
			// c[i] <- 1
			System.out.println("m < min");
			this.c[i] = 1;
		} else if (m == min) {
			// c[i] <- 1
			System.out.println("m == min");
			this.c[i] = 1;
		} else if (m < max && m > min) {
			// c[i] <- min(getC(i-1),getC(i+1)) + 1
			System.out.println("m < max && m > min");
			this.c[i] = Math.min(getC(i - 1), getC(i + 1)) + 1;
		} else if (m == max) {
			// c[i] <- min(getC(i-1),getC(i+1)) + 1
			System.out.println("m == max");
			this.c[i] = Math.min(getC(i - 1), getC(i + 1)) + 1;
		} else if (m > max) {
			// c[i] <- max(getC(i-1),getC(i+1)) + 1
			System.out.println("m > max");
			this.c[i] = Math.max(getC(i - 1), getC(i + 1)) + 1;
		}
	}

	/**
	 * int -> int
	 * 
	 * @param i
	 *            : the index of ratings return : max value if index out of
	 *            boundary, otherwise return ratings[i]
	 */
	private int getR(int i) {
		if (i == -1) {
			return Integer.MAX_VALUE;
		}
		if (i == this.ratings.length) {
			return Integer.MAX_VALUE;
		}
		return this.ratings[i];
	}

	/**
	 * int -> int
	 * 
	 * @param i
	 *            : the index of i iff c[i] haven't been compute, first compute
	 *            c[i]
	 */
	private int getC(int i) {
		if (i < 0 || i >= this.c.length){
			return 0;
		}
		if (this.c[i] == 0) {
			// call some function to compute
			compare(i);
		}
		return this.c[i];

	}
	
	
	public static void main(String[] args) {
		Solution s = new Solution();
		int[] ratings = new int[]{1,1};
		s.candy(ratings);
	}
}