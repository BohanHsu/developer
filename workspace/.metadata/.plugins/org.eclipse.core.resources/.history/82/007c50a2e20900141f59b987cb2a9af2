package populatingNextRightPointersinEachNodeII;


class TreeLinkNode {
	int val;
	TreeLinkNode left, right, next;

	TreeLinkNode(int x) {
		val = x;
	}
}

public class Solution {
	public void connect(TreeLinkNode root) {
		TreeLinkNode n = null; // n is the current node
		TreeLinkNode head = null; // is the head of n's father's line
		TreeLinkNode f = null; // f is n's father

		head = root;
		n = getFirstChildOfNode(head);
		f = root; // f is n's father

		TreeLinkNode u = null;
		TreeLinkNode m = null;
		while (n != null) {
			//n = getFirstChildOfNode(f);
			u = getNextByFatherAndNode(f,n);
			if (u == null) {

			}
			if (f == u) {
				n.next = f.right;
				// father node not change
			} else {
				n.next = getFirstChildOfNode(u);
				f = u;
			}
			n = n.next;
			if (f == null) {
				f = getFirstNodeWithChild(head);
				n = getFirstChildOfNode(f);
				head = f;
			}
		}

	}

	private TreeLinkNode getFirstChildOfNode(TreeLinkNode n) {
		if (n.left != null) {
			return n.left;
		} else {
			return n.right;
		}
	}

	private TreeLinkNode getNextByFatherAndNode(TreeLinkNode fa, TreeLinkNode n) {
		if (n == fa.left && fa.right != null) {
			return fa;
		}
		TreeLinkNode uncle = getFirstNodeWithChild(fa.next);
		return uncle;
	}

	private TreeLinkNode getFirstNodeWithChild(TreeLinkNode head) {
		if (head == null) {
			return null;
		}
		while (true) {
			if (head.left != null || head.right != null) {
				return head;
			} else {
				if (head.next != null) {
					head = head.next;
				} else {
					return null;
				}
			}
		}
	}
	
	public static void main(String[] args) {
		Solution s = new Solution();
		TreeLinkNode t1 = new TreeLinkNode(1);
		TreeLinkNode t2 = new TreeLinkNode(2);
		TreeLinkNode t3 = new TreeLinkNode(3);
		TreeLinkNode t4 = new TreeLinkNode(4);
		TreeLinkNode t5 = new TreeLinkNode(5);
		TreeLinkNode t6 = new TreeLinkNode(6);
		TreeLinkNode t7 = new TreeLinkNode(7);
		t1.left = t2;
		t1.right = t3;
		t2.left = t4;
		t2.right = t5;
		t3.left = t6;
		t3.right = t7;
		s.connect(t1);
		System.out.println(t1.next == null);
		System.out.println(t2.next == null);
		System.out.println(t2.next.val);
		System.out.println(t3.next == null);
		System.out.println(t4.next == null);
		System.out.println(t4.next.val);
		System.out.println(t5.next == null);
		System.out.println(t5.next.val);
		System.out.println(t6.next == null);
		System.out.println(t6.next.val);
		System.out.println(t7.next == null);
	}
}
