package reorderList;

//  Definition for singly-linked list.
class ListNode {
	int val;
	ListNode next;

	ListNode(int x) {
		val = x;
		next = null;
	}
}

public class Solution {
	public void reorderList(ListNode head) {
		int length = lengthOfList(head);
		int p1Length = length / 2;
		ListNode p1 = head;
		ListNode p2 = null;

		ListNode n = head;
		int count = 0;
		while (count < p1Length) {
			n = n.next;
		}

		ListNode pn = n;
		n = n.next;
		pn.next = null;

		while (n != null) {
			pn = n;
			n = n.next;
			p2 = insertToHead(p2, pn);
		}

		while (p2 != null) {
			pn = n.next;
			n.next = p2;
			p2 = p2.next;
			p2.next = pn;
			n = pn;
		}
	}

	/**
	 * ListNode * 2 -> ListNode
	 * 
	 * @param head
	 *            : the head of the old list
	 * @param node
	 *            : the new node to be insert return : the new head of the list
	 */
	private ListNode insertToHead(ListNode head, ListNode node) {
		if (node == null) {
			return head;
		} else {
			node.next = head;
			return node;
		}
	}

	/**
	 * ListNode -> int
	 * 
	 * @param ln
	 *            : the head of a list return : the length of the list
	 */
	private int lengthOfList(ListNode head) {
		int length = 0;
		while (head != null) {
			length++;
		}
		return length;
	}
}