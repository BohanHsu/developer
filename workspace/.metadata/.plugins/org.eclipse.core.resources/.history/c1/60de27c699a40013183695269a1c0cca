package grammar;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import utility.GrammarReader;

public class ContextFreeLanguage {
	
	private HashSet<String> nonTerminalSymbols = null;
	private HashSet<String> terminalSymbols = null;
	private HashMap<String, ArrayList<Rule>> mapping = null; 
	public ContextFreeLanguage() {
	}
	
	public ContextFreeLanguage(String grammarPath) {
		ArrayList<String> lines = new GrammarReader(grammarPath).getGrammar();
		this.nonTerminalSymbols = new HashSet<String>();
		this.terminalSymbols = new HashSet<String>();
		for (String line : lines) {
			String[] parts = line.split("\t");
			nonTerminalSymbols.add(parts[1]);
			if (parts.length > 2){
				String[] toParts = parts[2].split(" ");
				for (String symbol : toParts){
					terminalSymbols.add(symbol);
				}
			}
		}
		terminalSymbols.removeAll(nonTerminalSymbols);
		
		// 
		//System.out.println(nonTerminalSymbols);
		//System.out.println(terminalSymbols);
		
		for (String line : lines) {
			String[] parts = line.split("\t");
			double weight = Double.parseDouble(parts[0]);
			String[] toParts = null;
			if (parts.length > 2){
				toParts = parts[2].split(" ");
			}
			Rule rule = new Rule(weight, parts[1], toParts);
			if (!this.mapping.containsKey(parts[1])){
				this.mapping.put(parts[1], new ArrayList<Rule>());
			}
			this.mapping.get(parts[1]).add(rule);// finished here, need to be test
		}
	}
	
	public static void main(String[] args) {
//		String path = "src/grammar1.txt";
//		ContextFreeLanguage cfl = new ContextFreeLanguage(path);
	}
}
