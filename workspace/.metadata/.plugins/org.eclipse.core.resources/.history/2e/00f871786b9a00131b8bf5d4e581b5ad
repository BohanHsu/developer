package wordBreak;

import java.util.HashSet;
import java.util.Set;

public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        HashSet<Integer> length = new HashSet<Integer>();
    	int min = Integer.MAX_VALUE; // the minimum length in dict
        int max = Integer.MIN_VALUE; // the maximum length in dict
        
        // set the min and max
        for (String str : dict){
            length.add(str.length());
        }
        
        return wordBreak(s, dict, min, max);
    }
    
    private boolean wordBreak(String s, Set<String> dict, int min, int max) {

        
        boolean result = false;
        String word = null;
        String remain = null;
        int len = s.length();
        
        if (len < min){
        	return false;
        }
        
        max = max < len ? max : len;
        
        for (int i = min; i <= max; i++){
            word = s.substring(0,i);
            remain = s.substring(i,len);
            
            System.out.println("word:" + word);
            System.out.println("remain:" + remain);
            if ("".equals(remain)){
            	result = dict.contains(word);
            }else{
            	result = dict.contains(word) && wordBreak(remain, dict);
            }
            if (result == true){
                return result;
            }
        }
        return false;
    }
    
    public static void main(String[] args) {
		Solution s = new Solution();
		HashSet<String> dict = new HashSet<String>();
		dict.add("code");
		dict.add("leet");
		dict.add("co");
		dict.add("dele");
		String str = "leetcodele";
		boolean can = s.wordBreak(str, dict);
		System.out.println(can);
	}
}
